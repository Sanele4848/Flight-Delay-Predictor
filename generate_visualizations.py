import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# Set style
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

# Create output directory
import os
os.makedirs('visualizations', exist_ok=True)

# Load the data files generated by main.py
print("Loading data files...")
monthly_stats = pd.read_csv('models/monthly_patterns.csv', index_col=0, header=[0, 1])
carrier_stats = pd.read_csv('models/carrier_performance.csv', index_col=0, header=[0, 1])
airport_stats = pd.read_csv('models/airport_performance.csv', index_col=0, header=[0, 1])
yearly_stats = pd.read_csv('models/yearly_trends.csv', index_col=0, header=[0, 1])
feature_importance = pd.read_csv('models/feature_importance.csv')
test_predictions = pd.read_csv('models/test_predictions.csv')

print("Generating visualizations...\n")

# ============================================================================
# 1. SEASONAL DELAY PATTERNS - Line Graph with Zones
# ============================================================================
print("1. Generating Seasonal Delay Patterns...")

fig, ax = plt.subplots(figsize=(14, 7))
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
delay_rates = monthly_stats[('delay_rate', 'mean')].values * 100

# Plot line
ax.plot(months, delay_rates, marker='o', linewidth=3, markersize=10, color='#2E86AB', label='Delay Rate')

# Color zones
for i in range(len(months)):
    if delay_rates[i] > 22:  # High risk (red)
        ax.axvspan(i-0.5, i+0.5, alpha=0.15, color='red')
    elif delay_rates[i] < 17:  # Low risk (green)
        ax.axvspan(i-0.5, i+0.5, alpha=0.15, color='green')
    else:  # Moderate risk (yellow)
        ax.axvspan(i-0.5, i+0.5, alpha=0.15, color='orange')

# Overall average line
overall_avg = delay_rates.mean()
ax.axhline(y=overall_avg, color='red', linestyle='--', linewidth=2, label=f'Overall Avg: {overall_avg:.2f}%')

# Labels
ax.set_xlabel('Month', fontsize=14, fontweight='bold')
ax.set_ylabel('Delay Rate (%)', fontsize=14, fontweight='bold')
ax.set_title('Seasonal Flight Delay Patterns (2013-2023)', fontsize=16, fontweight='bold')
ax.legend(fontsize=12)
ax.grid(True, alpha=0.3)

# Annotate best and worst
best_month = delay_rates.argmin()
worst_month = delay_rates.argmax()
ax.annotate(f'Best: {delay_rates[best_month]:.2f}%',
            xy=(best_month, delay_rates[best_month]),
            xytext=(best_month, delay_rates[best_month]-2),
            fontsize=11, fontweight='bold', color='green',
            ha='center')
ax.annotate(f'Worst: {delay_rates[worst_month]:.2f}%',
            xy=(worst_month, delay_rates[worst_month]),
            xytext=(worst_month, delay_rates[worst_month]+1),
            fontsize=11, fontweight='bold', color='red',
            ha='center')

plt.tight_layout()
plt.savefig('visualizations/01_seasonal_patterns.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 01_seasonal_patterns.png")

# ============================================================================
# 2. CARRIER PERFORMANCE RANKING - Horizontal Bar Chart
# ============================================================================
print("2. Generating Carrier Performance Ranking...")

carrier_stats = carrier_stats.sort_values(('delay_rate', 'mean'))
carrier_names = carrier_stats.index.tolist()
carrier_delays = (carrier_stats[('delay_rate', 'mean')] * 100).tolist()

fig, ax = plt.subplots(figsize=(12, 10))

# Create color gradient from green to red
colors = plt.cm.RdYlGn_r(np.linspace(0.2, 0.8, len(carrier_names)))

bars = ax.barh(carrier_names, carrier_delays, color=colors, edgecolor='black', linewidth=0.5)

# Add value labels
for i, (bar, val) in enumerate(zip(bars, carrier_delays)):
    ax.text(val + 0.3, i, f'{val:.2f}%', va='center', fontsize=9, fontweight='bold')

ax.set_xlabel('Delay Rate (%)', fontsize=14, fontweight='bold')
ax.set_ylabel('Carrier', fontsize=14, fontweight='bold')
ax.set_title('Carrier Performance Ranking (Best to Worst)', fontsize=16, fontweight='bold')
ax.axvline(x=19.30, color='red', linestyle='--', linewidth=2, label='Overall Average: 19.30%')
ax.legend(fontsize=11)
ax.grid(True, axis='x', alpha=0.3)

plt.tight_layout()
plt.savefig('visualizations/02_carrier_performance.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 02_carrier_performance.png")

# ============================================================================
# 3. TOP 10 BEST vs WORST CARRIERS - Side by Side
# ============================================================================
print("3. Generating Top 10 Best vs Worst Carriers...")

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

# Top 10 Best
top10 = carrier_stats.head(10)
top10_names = top10.index.tolist()
top10_delays = (top10[('delay_rate', 'mean')] * 100).tolist()

ax1.barh(top10_names, top10_delays, color='#2E7D32', edgecolor='black', linewidth=0.5)
for i, val in enumerate(top10_delays):
    ax1.text(val + 0.2, i, f'{val:.2f}%', va='center', fontsize=10, fontweight='bold')
ax1.set_xlabel('Delay Rate (%)', fontsize=12, fontweight='bold')
ax1.set_title('Top 10 Best Performing Carriers', fontsize=14, fontweight='bold')
ax1.invert_yaxis()
ax1.grid(True, axis='x', alpha=0.3)

# Top 10 Worst
bottom10 = carrier_stats.tail(10)
bottom10_names = bottom10.index.tolist()
bottom10_delays = (bottom10[('delay_rate', 'mean')] * 100).tolist()

ax2.barh(bottom10_names, bottom10_delays, color='#C62828', edgecolor='black', linewidth=0.5)
for i, val in enumerate(bottom10_delays):
    ax2.text(val + 0.2, i, f'{val:.2f}%', va='center', fontsize=10, fontweight='bold')
ax2.set_xlabel('Delay Rate (%)', fontsize=12, fontweight='bold')
ax2.set_title('Top 10 Worst Performing Carriers', fontsize=14, fontweight='bold')
ax2.invert_yaxis()
ax2.grid(True, axis='x', alpha=0.3)

plt.tight_layout()
plt.savefig('visualizations/03_carrier_top_bottom.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 03_carrier_top_bottom.png")

# ============================================================================
# 4. FEATURE IMPORTANCE - Horizontal Bar Chart
# ============================================================================
print("4. Generating Feature Importance Chart...")

top20_features = feature_importance.head(20)

fig, ax = plt.subplots(figsize=(12, 10))

colors_feat = plt.cm.viridis(np.linspace(0, 1, 20))
bars = ax.barh(range(20), top20_features['importance'].values, color=colors_feat, edgecolor='black', linewidth=0.5)

ax.set_yticks(range(20))
ax.set_yticklabels(top20_features['feature'].values, fontsize=10)
ax.set_xlabel('Importance Score', fontsize=14, fontweight='bold')
ax.set_ylabel('Feature', fontsize=14, fontweight='bold')
ax.set_title('Top 20 Most Important Features (Random Forest)', fontsize=16, fontweight='bold')
ax.invert_yaxis()

# Add value labels
for i, (bar, val) in enumerate(zip(bars, top20_features['importance'].values)):
    ax.text(val + 0.005, i, f'{val:.4f}', va='center', fontsize=9)

ax.grid(True, axis='x', alpha=0.3)
plt.tight_layout()
plt.savefig('visualizations/04_feature_importance.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 04_feature_importance.png")

# ============================================================================
# 5. TOP 3 FEATURES PIE CHART
# ============================================================================
print("5. Generating Top 3 Features Dominance Pie Chart...")

top3_importance = feature_importance.head(3)['importance'].sum()
other_importance = 1 - top3_importance

fig, ax = plt.subplots(figsize=(10, 8))
labels = ['Top 3 Features\n(seasonal_delay_rate,\narr_flights_log,\narr_del15_log)', 'All Other Features']
sizes = [top3_importance * 100, other_importance * 100]
colors_pie = ['#FF6B6B', '#4ECDC4']
explode = (0.1, 0)

wedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors_pie,
                                    autopct='%1.1f%%', startangle=90, textprops={'fontsize': 12, 'fontweight': 'bold'})

ax.set_title('Feature Importance Concentration:\nTop 3 Features = 92% of Total Importance',
             fontsize=16, fontweight='bold')

plt.tight_layout()
plt.savefig('visualizations/05_feature_importance_pie.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 05_feature_importance_pie.png")

# ============================================================================
# 6. DELAY CAUSE ATTRIBUTION - Pie Chart
# ============================================================================
print("6. Generating Delay Cause Attribution...")

causes = ['Carrier Operations', 'Late Aircraft\n(Cascades)', 'National Airspace\nSystem', 'Weather', 'Security']
percentages = [37.48, 34.60, 19.42, 5.65, 0.19]
colors_cause = ['#E74C3C', '#F39C12', '#3498DB', '#2ECC71', '#9B59B6']

fig, ax = plt.subplots(figsize=(12, 8))
wedges, texts, autotexts = ax.pie(percentages, labels=causes, colors=colors_cause,
                                    autopct='%1.2f%%', startangle=90,
                                    textprops={'fontsize': 11, 'fontweight': 'bold'})

ax.set_title('Flight Delay Cause Attribution\n(Average % of Total Delay Minutes)',
             fontsize=16, fontweight='bold')

# Add annotation for airline-attributable
ax.text(0, -1.5, 'Combined Airline-Attributable: 72.08%',
        ha='center', fontsize=13, fontweight='bold',
        bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.5))

plt.tight_layout()
plt.savefig('visualizations/06_delay_causes.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 06_delay_causes.png")

# ============================================================================
# 7. YEARLY TRENDS - Line Graph with COVID Gap
# ============================================================================
print("7. Generating Yearly Trends with Post-Pandemic Crisis...")

years = yearly_stats.index.tolist()
yearly_delays = (yearly_stats[('delay_rate', 'mean')] * 100).tolist()
yearly_avg_delay = yearly_stats[('avg_delay_minutes', 'mean')].tolist()

fig, ax1 = plt.subplots(figsize=(14, 7))

# Delay rate
color1 = '#E74C3C'
ax1.plot(years, yearly_delays, marker='o', linewidth=3, markersize=10, color=color1, label='Delay Rate')
ax1.set_xlabel('Year', fontsize=14, fontweight='bold')
ax1.set_ylabel('Delay Rate (%)', fontsize=14, fontweight='bold', color=color1)
ax1.tick_params(axis='y', labelcolor=color1)

# Highlight COVID gap
ax1.axvspan(2019.5, 2021.5, alpha=0.3, color='gray', label='COVID-19 Period (Excluded)')

# Highlight 2023 as worst
worst_year_idx = yearly_delays.index(max(yearly_delays))
ax1.scatter(years[worst_year_idx], yearly_delays[worst_year_idx],
           s=500, color='red', zorder=5, marker='*', edgecolor='black', linewidth=2)
ax1.annotate(f'WORST YEAR\n{yearly_delays[worst_year_idx]:.2f}%',
            xy=(years[worst_year_idx], yearly_delays[worst_year_idx]),
            xytext=(years[worst_year_idx], yearly_delays[worst_year_idx]+2),
            fontsize=11, fontweight='bold', color='red', ha='center',
            bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.7))

# Average delay duration on secondary axis
ax2 = ax1.twinx()
color2 = '#3498DB'
ax2.plot(years, yearly_avg_delay, marker='s', linewidth=2, markersize=8,
         color=color2, linestyle='--', alpha=0.7, label='Avg Delay Duration')
ax2.set_ylabel('Average Delay Duration (min)', fontsize=14, fontweight='bold', color=color2)
ax2.tick_params(axis='y', labelcolor=color2)

ax1.set_title('Yearly Performance Trends (2013-2023)\nPost-Pandemic Performance Crisis',
             fontsize=16, fontweight='bold')
ax1.grid(True, alpha=0.3)
ax1.legend(loc='upper left', fontsize=11)
ax2.legend(loc='upper right', fontsize=11)

plt.tight_layout()
plt.savefig('visualizations/07_yearly_trends.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 07_yearly_trends.png")

# ============================================================================
# 8. MODEL COMPARISON - Grouped Bar Chart
# ============================================================================
print("8. Generating Model Comparison Chart...")

models = ['Ridge', 'Decision\nTree', 'Random\nForest', 'KNN', 'Extra\nTrees', 'Gradient\nBoosting']
val_mae = [0.0231, 0.0320, 0.0166, 0.0649, 0.0353, 0.0185]
val_r2 = [0.7994, 0.8082, 0.9264, 0.1855, 0.7799, 0.9352]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

# MAE comparison
colors_model = ['#95A5A6' if i != 2 else '#27AE60' for i in range(6)]
bars1 = ax1.bar(models, val_mae, color=colors_model, edgecolor='black', linewidth=1.5)
ax1.set_ylabel('Validation MAE', fontsize=13, fontweight='bold')
ax1.set_title('Model Comparison: Mean Absolute Error\n(Lower is Better)', fontsize=14, fontweight='bold')
ax1.set_ylim(0, max(val_mae) * 1.2)

for bar, val in zip(bars1, val_mae):
    height = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2., height + 0.002,
            f'{val:.4f}', ha='center', va='bottom', fontsize=10, fontweight='bold')

# R² comparison
bars2 = ax2.bar(models, val_r2, color=colors_model, edgecolor='black', linewidth=1.5)
ax2.set_ylabel('Validation R² Score', fontsize=13, fontweight='bold')
ax2.set_title('Model Comparison: R² Score\n(Higher is Better)', fontsize=14, fontweight='bold')
ax2.set_ylim(0, 1.0)
ax2.axhline(y=0.8, color='red', linestyle='--', linewidth=1, alpha=0.5, label='Good Fit Threshold')

for bar, val in zip(bars2, val_r2):
    height = bar.get_height()
    ax2.text(bar.get_x() + bar.get_width()/2., height + 0.02,
            f'{val:.4f}', ha='center', va='bottom', fontsize=10, fontweight='bold')

ax2.legend()

plt.tight_layout()
plt.savefig('visualizations/08_model_comparison.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 08_model_comparison.png")

# ============================================================================
# 9. PREDICTED vs ACTUAL - Scatter Plot
# ============================================================================
print("9. Generating Predicted vs Actual Scatter Plot...")

# Calculate predictions from test data
sample_size = min(5000, len(test_predictions))
sample_idx = np.random.choice(len(test_predictions), sample_size, replace=False)
y_true_sample = test_predictions['y_true'].iloc[sample_idx].values
y_pred_sample = test_predictions['y_pred'].iloc[sample_idx].values

fig, ax = plt.subplots(figsize=(10, 10))

# Scatter plot
ax.scatter(y_true_sample, y_pred_sample, alpha=0.4, s=30, edgecolor='black', linewidth=0.3)

# Perfect prediction line
max_val = max(y_true_sample.max(), y_pred_sample.max())
ax.plot([0, max_val], [0, max_val], 'r--', linewidth=2, label='Perfect Prediction')

ax.set_xlabel('Actual Delay Rate', fontsize=14, fontweight='bold')
ax.set_ylabel('Predicted Delay Rate', fontsize=14, fontweight='bold')
ax.set_title('Model Performance: Predicted vs Actual Delay Rates\n(Random Forest - Test Set)',
            fontsize=16, fontweight='bold')
ax.legend(fontsize=12)
ax.grid(True, alpha=0.3)

# Add R² text
from sklearn.metrics import r2_score
r2 = r2_score(y_true_sample, y_pred_sample)
ax.text(0.05, 0.95, f'R² = {r2:.4f}', transform=ax.transAxes,
       fontsize=14, fontweight='bold', verticalalignment='top',
       bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))

plt.tight_layout()
plt.savefig('visualizations/09_predicted_vs_actual.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 09_predicted_vs_actual.png")

# ============================================================================
# 10. AIRPORT PERFORMANCE - Top/Bottom 10
# ============================================================================
print("10. Generating Airport Performance (Top/Bottom 10)...")

# Filter airports with sufficient data (at least 50 observations)
airport_filtered = airport_stats[airport_stats[('delay_rate', 'count')] >= 50].copy()
airport_sorted = airport_filtered.sort_values(('delay_rate', 'mean'))

top10_airports = airport_sorted.head(10)
bottom10_airports = airport_sorted.tail(10)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

# Top 10 Best
top10_names = top10_airports.index.tolist()
top10_delays = (top10_airports[('delay_rate', 'mean')] * 100).tolist()

ax1.barh(top10_names, top10_delays, color='#2E7D32', edgecolor='black', linewidth=0.5)
for i, val in enumerate(top10_delays):
    ax1.text(val + 0.2, i, f'{val:.2f}%', va='center', fontsize=10, fontweight='bold')
ax1.set_xlabel('Delay Rate (%)', fontsize=12, fontweight='bold')
ax1.set_title('Top 10 Best Performing Airports\n(Min 50 observations)', fontsize=14, fontweight='bold')
ax1.invert_yaxis()
ax1.grid(True, axis='x', alpha=0.3)

# Top 10 Worst
bottom10_names = bottom10_airports.index.tolist()
bottom10_delays = (bottom10_airports[('delay_rate', 'mean')] * 100).tolist()

ax2.barh(bottom10_names, bottom10_delays, color='#C62828', edgecolor='black', linewidth=0.5)
for i, val in enumerate(bottom10_delays):
    ax2.text(val + 0.2, i, f'{val:.2f}%', va='center', fontsize=10, fontweight='bold')
ax2.set_xlabel('Delay Rate (%)', fontsize=12, fontweight='bold')
ax2.set_title('Top 10 Worst Performing Airports\n(Min 50 observations)', fontsize=14, fontweight='bold')
ax2.invert_yaxis()
ax2.grid(True, axis='x', alpha=0.3)

plt.tight_layout()
plt.savefig('visualizations/10_airport_performance.png', dpi=300, bbox_inches='tight')
plt.close()
print("   ✓ Saved: 10_airport_performance.png")

print("\n" + "="*80)
print("ALL VISUALIZATIONS GENERATED SUCCESSFULLY!")
print("="*80)
print("\nFiles saved in 'visualizations/' directory:")
print("  01_seasonal_patterns.png - Seasonal delay patterns line chart")
print("  02_carrier_performance.png - Full carrier ranking")
print("  03_carrier_top_bottom.png - Top 10 best vs worst carriers")
print("  04_feature_importance.png - Top 20 features bar chart")
print("  05_feature_importance_pie.png - Top 3 features dominance")
print("  06_delay_causes.png - Delay cause attribution pie chart")
print("  07_yearly_trends.png - Yearly trends with COVID gap")
print("  08_model_comparison.png - Model performance comparison")
print("  09_predicted_vs_actual.png - Prediction accuracy scatter plot")
print("  10_airport_performance.png - Airport top/bottom performers")
print("\nAll visualizations are high-resolution (300 DPI) and ready for presentation/report use!")